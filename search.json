[{"path":"/articles/tutorial.html","id":"installation-and-dependency","dir":"Articles","previous_headings":"","what":"Installation and dependency","title":"COSMOS-tutorial","text":"COSMOS dependent CARNIVAL exhibiting signalling pathway optimisation. CARNIVAL requires interactive version IBM Cplex CBC-COIN solver network optimiser. IBM ILOG Cplex freely available Academic Initiative . CBC solver open source freely available user, significantly lower performance CPLEX. Obtain CBC executable directly usable cosmos . Alternatively small networks, users can rely freely available lpSolve R-package, automatically installed package. tutorial use lpSolve, strongly recommend obtain license CPLEX.","code":"# install from bioconductor if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"cosmosR\")   # install the newest (development) version from GitHub # install.packages(\"remotes\") # install CARNIVAL from github  remotes::install_github(\"saezlab/CARNIVAL\") remotes::install_github(\"saezlab/cosmosR\")"},{"path":"/articles/tutorial.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"COSMOS-tutorial","text":"COSMOS (Causal Oriented Search Multi-Omic Space) method integrates phosphoproteomics, transcriptomics, metabolomics data sets. COSMOS leverages extensive prior knowledge signaling pathways, metabolic networks, gene regulation computational methods estimate activities transcription factors kinases well network-level causal reasoning. pipeline can provide mechanistic explanations experimental observations across multiple omic data sets. data_intro_figure Essentially, COSMOS 3 main components: prior knowledge: goal COSMOS essentially connect various deregulation events together mechanistic hypotheses. mechanistic hypotheses basically known potential interactions molecular biology features, proteins metabolites. example interaction can activation MTOR AKT, EGFR canonical pathway. Thousands potential interaction can assembled together form large network interactions. networks thus called prior knowledge networks (PKN), summarize large amounts prior knowledge form network. context COSMOS interactions come Omnipath database, STICHdb recon3D reaction network. respect example interaction MTOR AKT, question usually asked presented given experimental context : MTOR can activate AKT general, interaction relevant experimental context? brings us second component COSMOS. data: Information deregulated transcription factors (TF), kinases/phosphophatases metabolites can extracted transcriptomic, phospho-proteomic metabolomic data respectively, using footprint analysis methods (see:https://github.com/saezlab/transcriptutorial (Especially chapter 4)). information can quite useful , characterize TFs kinases specifically deregulated cancer cells example. goal COSMOS find different deregulation events can connected together. Going back example MTOR AKT, know AKT can potentially activate MTOR, observe data AKT MTOR significantly activated cancer tissue compared healthy counterpart, reasonable chance interaction active cancer tissue ’m studying. problem data often contain information hundreds -regulated activities time, thousands potential interactions can potentially explain . order find optimal set interactions relevant explain deregulation observed data, algorithm needed. algorithm: problem described data part formulated integer linear optimisation problem. PKN data can abstracted large set integer variables operating together even larger set equations (see https://www.nature.com/articles/s41540-019-0118-z info). Given set fixed value variable (, subset known deregulation), need find values sets variable (corresponding proteins metabolites information data) can lead satisfying result. satisfying results context COSMOS represent sub-network interactions small possible coherently explaining many known deregulation possible. Thus, set equation mentioned earlier needs solved, using integer linear programming solver. solvers currently available COSMOS lpsolve, cbc cplex. general, CPLEX preferred CBC real case applications, lpsolve mainly used testing small networks sets measurements. Summary figure","code":""},{"path":"/articles/tutorial.html","id":"tutorial-section-signaling-to-metabolism","dir":"Articles","previous_headings":"","what":"Tutorial section: signaling to metabolism","title":"COSMOS-tutorial","text":"First, load package part, can set options CARNIVAL run, timelimit min gap tolerance. user provide path CPLEX/cbc executable. can check CARNIVAL_options variable see possible options can adjusted example, use built-solver lpSolve. User aware lpSolve used TESTS. obtain meaningful results, best solver cplex, cbc possible. next section, prepare input run cosmosR. signaling inputs result footprint based TF kinase activity estimation. info TF activity estimation transcriptomic data, see:https://github.com/saezlab/transcriptutorial (Especially chapter 4) use toy PKN, see full meta PKN, can load data(meta_network). see meta_PKN assembled, see: https://github.com/saezlab/meta_PKN_BIGG.git metabolites prior knowledge network identified XMetab__HMDBid_compartment XMetab__BIGGid_compartment (example “Metab__HMDB0000190_c”). compartment code BIGG model standard (r, c, e, x, m, l, n, g). Thus first need map whatever identifier metabolite data one network. Genes identified gene symboles (signaling part network) Gene####__symbole (reaction network part network). maximum network depth define maximum number step downstream kinase/TF COSMOS look deregulated metabolites. Good first guess max depth around 4 6 (15 toy dataset) differential experession data used filter wrong TF-target interactions context pre-optimisation. list genes differential expression data also used reference define genes expressed (genes diff_expression_data considered expressed, genes diff_expression_data removed network). , CARNIVAL_options$timelimit set pre-optimisation. Indeed, “filter_tf_gene_interaction_by_optimization” parameter “preprocess_COSMOS_signaling_to_metabolism” function set TRUE, COSMOS can perform first optimisation run order generate preliminary solution network can used filtering incoherences TF activities downstream target expressions. part, can set options actual run, timelimit min gap tolerance. running time much higher pre-optimisation. can increase number threads use many available CPUs. cosmosR run. Finally, process results first cosmosR run, translate gene names metabolites name.","code":"library(cosmosR) CARNIVAL_options <- default_CARNIVAL_options(solver = \"lpSolve\")  # To use CBC # CARNIVAL_options <- default_CARNIVAL_options(solver = \"cbc\") # CARNIVAL_options$solverPath <- \"~/Documents/cbc\" # CARNIVAL_options$threads <- 2 # CARNIVAL_options$mipGAP <- 0.05  # To use CPLEX: # CARNIVAL_options <- default_CARNIVAL_options(solver = \"cplex\") # CARNIVAL_options$solverPath <- \"C:/Program Files/CPLEX_solver/cplex/bin/x64_win64/cplex.exe\" # CARNIVAL_options$threads <- 2 # CARNIVAL_options$mipGAP <- 0.05   CARNIVAL_options$timelimit <- 3600 data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,                                         signaling_data = toy_signaling_input,                                         metabolic_data = toy_metabolic_input,                                                       diff_expression_data = toy_RNA,                                                       maximum_network_depth = 15,                                                       remove_unexpressed_nodes = TRUE,                                                       CARNIVAL_options = CARNIVAL_options) ## [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" ## [1] \"COSMOS: removing unexpressed nodes from PKN...\" ## [1] \"COSMOS: 0 interactions removed\" ## [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" ## [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" ## [1] \"COSMOS: 52 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: 2 input/measured nodes are not in PKN any more: USF1, SRF and 0 more.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"COSMOS: all 1 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" CARNIVAL_options$timelimit <- 14400 CARNIVAL_options$mipGAP <- 0.05 CARNIVAL_options$threads <- 2 test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,                                                       CARNIVAL_options = CARNIVAL_options) ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" formated_result_for <- format_COSMOS_res(test_result_for)"},{"path":"/articles/tutorial.html","id":"tutorial-section-metabolism-to-signaling","dir":"Articles","previous_headings":"","what":"Tutorial section: metabolism to signaling","title":"COSMOS-tutorial","text":"run metabolism signaling part, need prepare inputs. Now correct time set pre-optimisation run, can prepare inputs. can run cosmosR connect metabolism signaling. running time usually needs longer, problem seems harder solve CPLEX. Finally can format result backward run well (forward run)","code":"CARNIVAL_options$timelimit <- 3600 CARNIVAL_options$mipGAP <- 0.05 CARNIVAL_options$threads <- 2 test_back <- preprocess_COSMOS_metabolism_to_signaling(meta_network = toy_network,                                         signaling_data = toy_signaling_input,                                         metabolic_data = toy_metabolic_input,                                                        diff_expression_data = toy_RNA,                                                        maximum_network_depth = 15,                                                        remove_unexpressed_nodes = FALSE,                                                        CARNIVAL_options = CARNIVAL_options) ## [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" ## [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" ## [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" ## [1] \"COSMOS: 54 from  101 interactions are removed from the PKN\" ## [1] \"COSMOS: 1 input/measured nodes are not in PKN any more: Metab__HMDB0000190_c and 0 more.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" ## [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" ## [1] \"COSMOS: all 1 metabolic nodes from data were found in the meta PKN\" ## [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" ## [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" CARNIVAL_options$timelimit <- 28800  test_result_back <- run_COSMOS_metabolism_to_signaling(data = test_back,                                                        CARNIVAL_options = CARNIVAL_options) ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" ## [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" formated_result_back <- format_COSMOS_res(test_result_back)"},{"path":"/articles/tutorial.html","id":"tutorial-section-merge-forward-and-backward-networks-and-visualise-network","dir":"Articles","previous_headings":"","what":"Tutorial section: Merge forward and backward networks and visualise network","title":"COSMOS-tutorial","text":"simply take union forward backward runs create full network solution lopping signaling, gene-regulation metabolism. Since overlap result network forward backward run, may optionally want check node sign incoherent overlap two solutions. function generate dynamic network plot centered given node network solution, connecting measured nodes given range (7 steps). network can intepreted (purely illustrative, interaction may incorectly signed lpsolve can use positive interactions): network represents flow activities can connect MYC -regulation Glucitol (Sorbitol) accumulation. , NFKB1 can upregulate expression SLC2A1, turn transport glucose cytoplasm. increase transport glucose can lead glucose avlaible conversion glucitol AKR1A enzyme. Interestingly, glucitol now activator MAPK14, thus leading appearance positive feedback loop connecting MYC, glucitol MAPK14. important understand links hypothetical. come larger pool potential molecular interactions present multiple online databases compiled omnipath, STITCH recon metabolic network. exist literature interactions known potentially exists experimental contexts. Thus, COSMOS compile potential interactions together proposes coherent set can explain data hand. links however considered potential mechanistic connections, need confirmed experimentally. interactions can searched literature see disease experimental context shown relevant. Taken together, multiple interactions can help build biological story can guide underatanding underlying biology decide future experiments.","code":"full_sif <- as.data.frame(rbind(formated_result_for[[1]], formated_result_back[[1]])) full_sif <- full_sif[full_sif$Weight>0,] full_attributes <- as.data.frame(rbind(formated_result_for[[2]], formated_result_back[[2]]))  full_sif <- unique(full_sif) full_attributes <- unique(full_attributes) network_plot <- display_node_neighboorhood(central_node = 'Metab__D-Glucitol_c',                                             sif = full_sif,                                             att = full_attributes,                                             n = 7)  network_plot"},{"path":"/articles/tutorial.html","id":"tutorial-section-over-representation-analysis","dir":"Articles","previous_headings":"","what":"Tutorial section: Over Representation Analysis","title":"COSMOS-tutorial","text":"Often useful perform Representation Analysis (ORA) resulting nodes COSMOS network first analysis step get functional interpretation modeled signaling cascade. common way test whether selected genes (nodes) COSMOS solution network show statistically significant differences comparison prior-knowledge network (PKN). differentially expressed genes give information cellular processes deregulated proportions various pathways SIGNIFICANTLY different expected.way significant differences two biological conditions (e.g. cancer vs. normal tissue, treatment vs. untreated cells) can shown. Algorithms perform ORA implemented R packages like piano decoupleR. addition gene set collection algorithms require two different lists inputs: - nodes COSMOS solution network relate back input data (e.g. transcriptomics, proteomics, metabolomics, fluxomics, perturbations) - nodes (kinases, transcription factors, metabolites) prior-knowledge network (used background analysis) section show obtain two lists formated COSMOS result object. Now forward backward sets can used ORA analysis.","code":"sif_forward = formated_result_for[[1]] att_forward = formated_result_for[[2]] nodes_ORA = extract_nodes_for_ORA(     sif = sif_forward,      att = att_forward) sessionInfo() ## R version 4.2.1 (2022-06-23) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 20.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] cosmosR_1.5.2 ##  ## loaded via a namespace (and not attached): ##  [1] progress_1.2.2    bcellViper_1.32.0 tidyselect_1.2.0  xfun_0.40         ##  [5] bslib_0.5.1       lpSolve_5.6.19    purrr_1.0.2       lattice_0.21-8    ##  [9] vctrs_0.6.3       generics_0.1.3    htmltools_0.5.6   yaml_2.3.7        ## [13] utf8_1.2.3        rlang_1.1.1       pkgdown_2.0.7     jquerylib_0.1.4   ## [17] pillar_1.9.0      glue_1.6.2        withr_2.5.0       bit64_4.0.5       ## [21] lifecycle_1.0.3   stringr_1.5.0     ragg_1.2.5        htmlwidgets_1.6.2 ## [25] visNetwork_2.1.2  memoise_2.0.1     evaluate_0.21     knitr_1.44        ## [29] CARNIVAL_2.6.2    tzdb_0.4.0        fastmap_1.1.1     dorothea_1.8.0    ## [33] parallel_4.2.1    fansi_1.0.4       readr_2.1.4       cachem_1.0.8      ## [37] desc_1.4.2        vroom_1.6.3       jsonlite_1.8.7    bit_4.0.5         ## [41] systemfonts_1.0.4 fs_1.6.3          textshaping_0.3.6 rjson_0.2.21      ## [45] hms_1.1.3         digest_0.6.33     stringi_1.7.12    dplyr_1.1.3       ## [49] rprojroot_2.0.3   grid_4.2.1        cli_3.6.1         tools_4.2.1       ## [53] magrittr_2.0.3    decoupleR_2.2.2   sass_0.4.7        tibble_3.2.1      ## [57] crayon_1.5.2      tidyr_1.3.0       pkgconfig_2.0.3   ellipsis_0.3.2    ## [61] Matrix_1.6-1      prettyunits_1.1.1 rmarkdown_2.24    R6_2.5.1          ## [65] igraph_1.5.1      compiler_4.2.1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aurélien Dugourd. Author. Attila Gabor. Maintainer. Katharina Zirngibl. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aurelien Dugourd, Christoph Kuppe, Marco Sciacovelli, Enio Gjerga, Attila Gabor, Kristina B. Emdal, Vitor Vieira, Dorte B. Bekker-Jensen, Jennifer Kranz, Eric. M. J. Bindels, Ana S. H. Costa, Abel sousa, Pedro Beltrao, Jesper V. Olsen, Christian Frezza, Rafael Kramann, Julio Saez-Rodriguez. 'Causal integration multi-omics data prior knowledge generate mechanistic hypotheses.' Molecular Systems Biology. 2021.","code":"@Article{,   author = {Aurelien Dugourd and Christoph Kuppe and Marco Sciacovelli and Enio Gjerga and Attila Gabor and Kristina B. Embdal and Vitor Vieira and Dorte B. Bekker-Jensen and Jennifer Kranz and Eric M. J. Bindels and Ana S. H. Costa and Abel Sousa and Pedro Beltrao and Jesper V Olsen and Christian Frezza and Rafael Kramann and Julio Saez-Rodriguez},   title = {Causal integration of multi-omics data with prior knowledge to generate mechanistic hypotheses},   journal = {Molecular Systems Biology},   year = {2021}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"COSMOS (Causal Oriented Search Multi-Omic Space) method integrates phosphoproteomics, transcriptomics, metabolomics data sets. COSMOS leverages extensive prior knowledge signaling pathways, metabolic networks, gene regulation computational methods estimate activities transcription factors kinases well network-level causal reasoning. pipeline can provide mechanistic explanations experimental observations across multiple omic data sets.  COSMOS uses CARNIVAL’s Integer Linear Programming (ILP) optimization strategy find smallest coherent subnetwork causally connecting many deregulated TFs, kinases/phosphatases metabolites possible. subnetwork extracted novel integrated PKN (available ) spanning signaling, transcriptional regulation metabolism. Transcription factors activities inferred gene expression DoRothEA, meta resource TF/target links. Kinase activities inferred phosphoproteomic kinase/substrate network Omnipath, meta resource protein-protein. CARNIVAL adapted find mechanistic hypotheses connecting TF kinase activities metabolites signaling/metabolic prior knowledge network combining Omnipath, STITCHdb Recon3D. scripts generate current network can found : https://github.com/saezlab/meta_PKN_BIGG. can also use COSMOS don’t metabolomic data, connect TF activities (transcriptomic) kinase activities (phosphoproteomic) exmaple !","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"R >= 4.1 required don’t R 4.1, can also clone github repository machine, create new R project R studio cosmosR folder, change R version R version DESCRIPTION file install devtools:install() 4.1 advised case.","code":"# install from bioconductor if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"cosmosR\")  # We advise to instal from github to get the latest version of the tool. if (!requireNamespace(\"devtools\", quietly = TRUE))     install.packages(\"devtools\")      devtools::install_github(\"saezlab/cosmosR\")"},{"path":"/index.html","id":"prerequisites","dir":"","previous_headings":"Installation","what":"Prerequisites","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"COSMOS dependent CARNIVAL exhibiting signalling pathway optimisation. CARNIVAL requires interactive version IBM Cplex, Gurobi CBC-COIN solver network optimiser. IBM ILOG Cplex freely available Academic Initiative . Gurobi license also free academics, request license . CBC solver open source freely available user, significantly lower performance CPLEX Gurobi. Obtain CBC executable directly usable cosmos . Alternatively small networks, users can rely freely available lpSolve R-package, automatically installed package. Small note package dependencies: CARNIVAL currently active development. try ensure compatibility packages, please install CARNIVAL Github:","code":"# Install  remotes::install_github(\"saezlab/CARNIVAL\")"},{"path":"/index.html","id":"tutorial-video","dir":"","previous_headings":"","what":"Tutorial (video)","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"recorded video guide cosmosR tutorial context course organised EBI-EMBL. can access recording link step step introduction cosmosR : https://embl-ebi.cloud.panopto.eu/Panopto/Pages/Viewer.aspx?id=318f7091-b6bf-44ee-939f-adb10121fc1b","code":""},{"path":"/index.html","id":"tutorial-nci60-playground","dir":"","previous_headings":"","what":"Tutorial (NCI60 playground)","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"made repository contains pre-processed inputs example script use cosmos NCI60 RNA+metabolomic datasets. can find repository .","code":""},{"path":"/index.html","id":"access","dir":"","previous_headings":"","what":"Access","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"meta PKN used biorXiv version COSMOS available . updated meta PKN available package (using data(meta_network) R)","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"use cosmosR research please cite original publication: Dugourd , Kuppe C, Sciacovelli M, Gjerga E, Gabor , Emdal KB, Vieira V, Bekker-Jensen DB, Kranz J, Bindels EMJ, Jesper V Olsen, Christian Frezza, Rafael Kramann, Julio Saez-Rodriguez et al (2021) Causal integration multi-omics data prior knowledge generate mechanistic hypotheses. Mol Syst Biol 17: e9730","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"COSMOS (Causal Oriented Search of Multi-Omic Space)","text":"code distributed GNU General Public License v3.0. meta PKN distributed Attribution-NonCommercial 4.0 International (CC--NC 4.0) License.","code":""},{"path":"/reference/HMDB_mapper_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Input Transcription Data Set — HMDB_mapper_vec","title":"Toy Input Transcription Data Set — HMDB_mapper_vec","text":"exemplary transcription data specific deregulated gene expression 786-O cell line NCI60 dataset.","code":""},{"path":"/reference/HMDB_mapper_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Input Transcription Data Set — HMDB_mapper_vec","text":"","code":"data(HMDB_mapper_vec)"},{"path":"/reference/HMDB_mapper_vec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Input Transcription Data Set — HMDB_mapper_vec","text":"object class “character” containing marching HMDB metabolite IDs coresponding metabolite names.","code":""},{"path":"/reference/HMDB_mapper_vec.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Toy Input Transcription Data Set — HMDB_mapper_vec","text":"https://bioconductor.org/packages/release/data/annotation/html/metaboliteIDmapping.html","code":""},{"path":"/reference/HMDB_mapper_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toy Input Transcription Data Set — HMDB_mapper_vec","text":"","code":"data(HMDB_mapper_vec)"},{"path":"/reference/compress_same_children.html","id":null,"dir":"Reference","previous_headings":"","what":"Compress Network by Merging Nodes with Identical Children — compress_same_children","title":"Compress Network by Merging Nodes with Identical Children — compress_same_children","text":"function compresses network merging nodes children. input network represented data frame three columns: source, target, sign interaction. function returns list containing compressed network, node signatures, duplicated signatures.","code":""},{"path":"/reference/compress_same_children.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compress Network by Merging Nodes with Identical Children — compress_same_children","text":"","code":"compress_same_children(df, sig_input, metab_input)"},{"path":"/reference/compress_same_children.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compress Network by Merging Nodes with Identical Children — compress_same_children","text":"df data frame representing network three columns: source, target, sign interaction. sig_input list input node signatures considered merging process. metab_input list input metabolic signatures considered merging process.","code":""},{"path":"/reference/compress_same_children.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compress Network by Merging Nodes with Identical Children — compress_same_children","text":"list containing following elements: compressed_network data frame representing compressed network. node_signatures list signatures nodes network merging process. duplicated_signatures list duplicated signatures network merging process.","code":""},{"path":"/reference/compress_same_children.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compress Network by Merging Nodes with Identical Children — compress_same_children","text":"","code":"# Create a sample network df <- data.frame(source = c(\"A\", \"A\", \"B\", \"B\"),                  target = c(\"C\", \"D\", \"C\", \"D\"),                  sign_of_interaction = c(1, 1, 1, 1))  # Define input node and metabolic signatures sig_input <- list() metab_input <- list()  # Compress the network result <- compress_same_children(df, sig_input, metab_input) compressed_network <- result$compressed_network"},{"path":"/reference/cosmos_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Cosmos Data — cosmos_data","title":"Create Cosmos Data — cosmos_data","text":"S3 class combines required data comprehensive list.  Use  preprocess_COSMOS_signaling_to_metabolism  preprocess_COSMOS_metabolism_to_signaling create instance.","code":""},{"path":"/reference/cosmos_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Cosmos Data — cosmos_data","text":"","code":"cosmos_data(   meta_network,   tf_regulon = NULL,   signaling_data,   metabolic_data,   expression_data,   verbose = TRUE )"},{"path":"/reference/cosmos_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Cosmos Data — cosmos_data","text":"meta_network Prior knowledge network (PKN).  default COSMOS use PKN derived Omnipath, STITCHdb Recon3D.  See details data  meta_network. tf_regulon Collection transcription factor - target interactions. default collection dorothea can obtained  load_tf_regulon_dorothea function. signaling_data Numerical vector, names signaling nodes  PKN values {1, 0, -1}.  Continuous data  discretized using sign function. metabolic_data Numerical vector, names metabolic nodes  PKN values continuous values represents log2 fold change  t-values differential analysis.  values compared  simulation results (simulated nodes can take value -1, 0 1). expression_data Numerical vector represents results  differential gene expression analysis. Names gene names using EntrezID  starting X values log fold change t-values. Genes  NA values considered none expressed removed TF-gene expression interactions. verbose (default: TRUE) Reports details cosmos_data object.","code":""},{"path":"/reference/cosmos_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Cosmos Data — cosmos_data","text":"cosmos data class instance.","code":""},{"path":"/reference/decompress_solution_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Decompress Solution Network — decompress_solution_network","title":"Decompress Solution Network — decompress_solution_network","text":"function decompresses solution network mapping node signatures back original identifiers. input formatted solution network, meta network, node signatures, duplicated parents. function returns list containing decompressed solution network attribute table.","code":""},{"path":"/reference/decompress_solution_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decompress Solution Network — decompress_solution_network","text":"","code":"decompress_solution_network(   formatted_res,   meta_network,   node_signatures,   duplicated_parents )"},{"path":"/reference/decompress_solution_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decompress Solution Network — decompress_solution_network","text":"formatted_res list containing solution network attribute table. meta_network data frame representing meta network. node_signatures list node signatures. duplicated_parents list duplicated parents compression process.","code":""},{"path":"/reference/decompress_solution_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decompress Solution Network — decompress_solution_network","text":"list containing following elements: SIF data frame representing decompressed solution network. ATT data frame containing attributes decompressed solution network.","code":""},{"path":"/reference/decompress_solution_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decompress Solution Network — decompress_solution_network","text":"","code":"# Create a sample formatted_res formatted_res <- list(   SIF = data.frame(source = c(\"parent_of_D1\", \"D\"),                    target = c(\"D\", \"F\"),                    interaction = c(1, 1),                    Weight = c(1, 1)),   ATT = data.frame(Nodes = c(\"parent_of_D1\", \"D\", \"F\"),                    NodeType = c(\"\",\"\",\"\"),                    ZeroAct = c(0,0,0),                    UpAct = c(1,1,1),                    DownAct = c(0,0,0),                    AvgAct = c(1,1,1),                    measured = c(0,0,0),                    Activity = c(1,1,1)) )  # Create a sample meta_network meta_network <- data.frame(source = c(\"A\", \"B\", \"D\"),                            target = c(\"D\", \"D\", \"F\"),                            interaction_type = c(1, 1, 1))  # Define node_signatures and duplicated_parents node_signatures <- list(\"A\" = \"parent_of_D1\",\"B\" = \"parent_of_D1\",\"D\" = \"parent_F1\") duplicated_parents <- c(\"A\" = \"parent_of_D1\",\"B\" = \"parent_of_D1\")  # Decompress the solution network result <- decompress_solution_network(formatted_res, meta_network, node_signatures, duplicated_parents) decompressed_network <- result[[1]] attribute_table <- result[[2]]"},{"path":"/reference/decoupleRnival.html","id":null,"dir":"Reference","previous_headings":"","what":"DecoupleRnival — decoupleRnival","title":"DecoupleRnival — decoupleRnival","text":"Iteratively propagate downstream input activity signed directed network using weighted mean enrichment score decoupleR package","code":""},{"path":"/reference/decoupleRnival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DecoupleRnival — decoupleRnival","text":"","code":"decoupleRnival(   upstream_input = NULL,   downstream_input,   meta_network,   n_layers,   n_perm = 1000,   downstream_cutoff = 0,   statistic = \"norm_wmean\" )"},{"path":"/reference/decoupleRnival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DecoupleRnival — decoupleRnival","text":"upstream_input named vector up_stream nodes corresponding activity. downstream_input named vector down_stream nodes corresponding activity. meta_network network data frame containing signed directed prior knowledge molecular interactions. n_layers number layers propagated upstream. n_perm number permutations use decoupleR's algorithm. downstream_cutoff downstream measurments included given threshold statistic decoupleR stat consider: \"wmean\", \"norm_wmean\", \"ulm\"","code":""},{"path":"/reference/decoupleRnival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DecoupleRnival — decoupleRnival","text":"data frame containing score nodes upstream  downstream input based iterative propagation","code":""},{"path":"/reference/decoupleRnival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DecoupleRnival — decoupleRnival","text":"","code":"# Example input data upstream_input <- c(\"A\" = 1, \"B\" = -1, \"C\" = 0.5) downstream_input <- c(\"D\" = 2, \"E\" = -1.5) meta_network <- data.frame(   source = c(\"A\", \"A\", \"B\", \"C\", \"C\", \"D\", \"E\"),   target = c(\"B\", \"C\", \"D\", \"E\", \"D\", \"B\", \"A\"),   sign = c(1, -1, -1, 1, -1, -1, 1) )  # Run the function with the example input data result <- decoupleRnival(upstream_input, downstream_input, meta_network, n_layers = 2, n_perm = 100) #> [1] \"Warning, this function is deprecated and will no longer receive futur support. Please use the 'moon' function instead\" #> [1] 2  # View the results print(result) #>   source    score #> 1      B -1.05659 #> D      D  2.00000 #> E      E -1.50000"},{"path":"/reference/default_CARNIVAL_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Setting Default CARNIVAL Options — default_CARNIVAL_options","title":"Setting Default CARNIVAL Options — default_CARNIVAL_options","text":"Returns default CARNIVAL options list.  can modify elements list use argument run_COSMOS_metabolism_to_signaling   run_COSMOS_signaling_to_metabolism. choose CPLEX CBC, must modify solverPath field point  CPLEX/CBC executable (See Details).","code":""},{"path":"/reference/default_CARNIVAL_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setting Default CARNIVAL Options — default_CARNIVAL_options","text":"","code":"default_CARNIVAL_options(solver = NULL)"},{"path":"/reference/default_CARNIVAL_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setting Default CARNIVAL Options — default_CARNIVAL_options","text":"solver one `cplex` (recommended, require 3rd party tool), `cbc` (also require 3rd party tool) `lpSolve` (small networks)","code":""},{"path":"/reference/default_CARNIVAL_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setting Default CARNIVAL Options — default_CARNIVAL_options","text":"returns list possible options implemented CARNIVAL. see documentation runCARNIVAL.","code":""},{"path":"/reference/default_CARNIVAL_options.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setting Default CARNIVAL Options — default_CARNIVAL_options","text":"COSMOS dependent CARNIVAL exhibiting signalling pathway optimisation. CARNIVAL requires interactive version IBM Cplex, Gurobi CBC-COIN solver  network optimiser. IBM ILOG Cplex freely available Academic Initiative . Gurobi license also free academics, request license following instructions .  CBC solver open source freely available user, significantly lower performance CPLEX  Gurobi. Obtain CBC executable directly usable cosmos . Alternatively small networks, users can rely freely available   lpSolve R-package,  automatically installed package.","code":""},{"path":"/reference/default_CARNIVAL_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setting Default CARNIVAL Options — default_CARNIVAL_options","text":"","code":"# load and change default options:  my_options = default_CARNIVAL_options(solver = \"cplex\")   my_options$solverPath = \"/Applications/CPLEX_Studio128/cplex/bin/x86-64_osx/cplex\" my_options$threads = 2 my_options$timelimit = 3600*15"},{"path":"/reference/display_node_neighboorhood.html","id":null,"dir":"Reference","previous_headings":"","what":"display_node_neighboorhood — display_node_neighboorhood","title":"display_node_neighboorhood — display_node_neighboorhood","text":"display input measurements within n steps given set nodes","code":""},{"path":"/reference/display_node_neighboorhood.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"display_node_neighboorhood — display_node_neighboorhood","text":"","code":"display_node_neighboorhood(central_node, sif, att, n = 100)"},{"path":"/reference/display_node_neighboorhood.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"display_node_neighboorhood — display_node_neighboorhood","text":"central_node character character vector; node ID(s) around  network branched untill meansurments input reached sif df; COSMOS network solution sif format like first list element returned format_cosmos_res function att df; attributes nodes COMSOS network solution like  second list element returned format_cosmos_res function n numeric; maximum number steps network look inputs  measurments","code":""},{"path":"/reference/display_node_neighboorhood.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"display_node_neighboorhood — display_node_neighboorhood","text":"visnetwork object","code":""},{"path":"/reference/display_node_neighboorhood.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"display_node_neighboorhood — display_node_neighboorhood","text":"","code":"CARNIVAL_options <- cosmosR::default_CARNIVAL_options(\"lpSolve\") data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network, signaling_data = toy_signaling_input, metabolic_data = toy_metabolic_input, diff_expression_data = toy_RNA, maximum_network_depth = 15, remove_unexpressed_nodes = TRUE, CARNIVAL_options = CARNIVAL_options ) #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" #> [1] \"COSMOS: removing unexpressed nodes from PKN...\" #> [1] \"COSMOS: 0 interactions removed\" #> [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" #> [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" #> [1] \"COSMOS: 52 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: 2 input/measured nodes are not in PKN any more: USF1, SRF and 0 more.\" #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:01 15.09.2023 Carnival flavour: vanilla #> 09:22:01 15.09.2023 Generating variables for lp problem #> 09:22:01 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_01d15_09_2023n45.RData #> 09:22:01 15.09.2023 Generating formulation for LP problem #> 09:22:01 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_01d15_09_2023n45.lp #> 09:22:01 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 882 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:02 15.09.2023 Done: solving LP problem. #> 09:22:02 15.09.2023 Getting the solution matrix #> 09:22:02 15.09.2023 Done: getting the solution matrix. #> 09:22:02 15.09.2023 Exporting solution matrix #> 09:22:02 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:02 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"COSMOS: all 1 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for, CARNIVAL_options = CARNIVAL_options) #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> Input nodes should have values from {-1, 0, 1}. We discretize your input with sign(). #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:02 15.09.2023 Carnival flavour: vanilla #> 09:22:02 15.09.2023 Generating variables for lp problem #> 09:22:02 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_02d15_09_2023n97.RData #> 09:22:02 15.09.2023 Generating formulation for LP problem #> 09:22:02 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_02d15_09_2023n97.lp #> 09:22:02 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 882 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:03 15.09.2023 Done: solving LP problem. #> 09:22:03 15.09.2023 Getting the solution matrix #> 09:22:03 15.09.2023 Done: getting the solution matrix. #> 09:22:03 15.09.2023 Exporting solution matrix #> 09:22:03 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:03 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  test_result_for <- format_COSMOS_res(test_result_for) network_plot <- display_node_neighboorhood(central_node = 'MYC', sif = test_result_for[[1]], att = test_result_for[[2]], n = 7) #> Warning: At core/paths/unweighted.c:368 : Couldn't reach some vertices. network_plot  {\"x\":{\"nodes\":{\"id\":[\"Enzyme1338__AKR1A1\",\"Enzyme7338__LDHB_LDHA_reverse\",\"Enzyme9049__SLC2A1_reverse\",\"FGFR1\",\"LDHA\",\"MAPK14\",\"MYC\",\"Metab__D-Glucitol_c\",\"Metab__D-Glucose_c\",\"Metab__L-Lactic acid_c\",\"SLC2A1\"],\"NodeType\":[\"\",\"\",\"\",\"\",\"\",\"\",\"P\",\"M\",\"\",\"M\",\"\"],\"ZeroAct\":[0,0,0,0,0,0,0,0,0,0,0],\"UpAct\":[1,1,1,1,1,1,1,1,1,1,1],\"DownAct\":[0,0,0,0,0,0,0,0,0,0,0],\"AvgAct\":[1,1,1,1,1,1,1,1,1,1,1],\"measured\":[0,0,0,0,0,0,1,1,0,1,0],\"Activity\":[1,1,1,1,1,1,1,1,1,1,1],\"label\":[\"Enzyme1338__AKR1A1\",\"Enzyme7338__LDHB_LDHA_reverse\",\"Enzyme9049__SLC2A1_reverse\",\"FGFR1\",\"LDHA\",\"MAPK14\",\"MYC\",\"Metab__D-Glucitol_c\",\"Metab__D-Glucose_c\",\"Metab__L-Lactic acid_c\",\"SLC2A1\"],\"color\":[\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\",\"green\"],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\"],\"shadow\":[false,false,false,false,false,false,true,true,false,true,false]},\"edges\":{\"from\":[\"MAPK14\",\"Metab__D-Glucitol_c\",\"FGFR1\",\"Enzyme1338__AKR1A1\",\"Enzyme7338__LDHB_LDHA_reverse\",\"Enzyme9049__SLC2A1_reverse\",\"LDHA\",\"MAPK14\",\"MYC\",\"Metab__D-Glucose_c\",\"SLC2A1\"],\"to\":[\"MYC\",\"MAPK14\",\"LDHA\",\"Metab__D-Glucitol_c\",\"Metab__L-Lactic acid_c\",\"Metab__D-Glucose_c\",\"Enzyme7338__LDHB_LDHA_reverse\",\"FGFR1\",\"SLC2A1\",\"Enzyme1338__AKR1A1\",\"Enzyme9049__SLC2A1_reverse\"],\"sign\":[1,1,1,1,1,1,1,-1,1,1,1],\"weigth\":[1,1,1,1,1,1,1,0,1,1,1],\"color\":[\"grey\",\"grey\",\"grey\",\"grey\",\"grey\",\"grey\",\"grey\",\"grey\",\"grey\",\"grey\",\"grey\"],\"arrows.to.type\":[\"arrow\",\"arrow\",\"arrow\",\"arrow\",\"arrow\",\"arrow\",\"arrow\",\"circle\",\"arrow\",\"arrow\",\"arrow\"],\"enabled\":[true,true,true,true,true,true,true,true,true,true,true],\"scaleFactor\":[1,1,1,1,1,1,1,1,1,1,1]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\"},\"manipulation\":{\"enabled\":false}},\"groups\":null,\"width\":1600,\"height\":1600,\"idselection\":{\"enabled\":true,\"style\":\"width: 200px; height: 26px;\\n                                              background: #f8f8f8;\\n                                              color: darkblue;\\n                                              border:none;\\n                                              outline:none;\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/extract_nodes_for_ORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract COSMOS nodes for ORA analysis — extract_nodes_for_ORA","title":"Extract COSMOS nodes for ORA analysis — extract_nodes_for_ORA","text":"Function extract nodes appear COSMOS output network background genes (genes present prior knowledge network)","code":""},{"path":"/reference/extract_nodes_for_ORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract COSMOS nodes for ORA analysis — extract_nodes_for_ORA","text":"","code":"extract_nodes_for_ORA(sif, att)"},{"path":"/reference/extract_nodes_for_ORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract COSMOS nodes for ORA analysis — extract_nodes_for_ORA","text":"sif df; COSMOS network solution sif format like first list element returned format_cosmos_res function att df; attributes nodes COMSOS network solution like  second list element returned format_cosmos_res function","code":""},{"path":"/reference/extract_nodes_for_ORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract COSMOS nodes for ORA analysis — extract_nodes_for_ORA","text":"List 2 objects: success background genes","code":""},{"path":"/reference/extract_nodes_for_ORA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract COSMOS nodes for ORA analysis — extract_nodes_for_ORA","text":"","code":"CARNIVAL_options <- cosmosR::default_CARNIVAL_options(\"lpSolve\") data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network, signaling_data = toy_signaling_input, metabolic_data = toy_metabolic_input, diff_expression_data = toy_RNA, maximum_network_depth = 15, remove_unexpressed_nodes = TRUE, CARNIVAL_options = CARNIVAL_options ) #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" #> [1] \"COSMOS: removing unexpressed nodes from PKN...\" #> [1] \"COSMOS: 0 interactions removed\" #> [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" #> [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" #> [1] \"COSMOS: 52 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: 2 input/measured nodes are not in PKN any more: USF1, SRF and 0 more.\" #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:04 15.09.2023 Carnival flavour: vanilla #> 09:22:04 15.09.2023 Generating variables for lp problem #> 09:22:04 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_04d15_09_2023n26.RData #> 09:22:04 15.09.2023 Generating formulation for LP problem #> 09:22:04 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_04d15_09_2023n26.lp #> 09:22:04 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 882 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:04 15.09.2023 Done: solving LP problem. #> 09:22:04 15.09.2023 Getting the solution matrix #> 09:22:04 15.09.2023 Done: getting the solution matrix. #> 09:22:04 15.09.2023 Exporting solution matrix #> 09:22:04 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:04 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"COSMOS: all 1 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for, CARNIVAL_options = CARNIVAL_options) #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> Input nodes should have values from {-1, 0, 1}. We discretize your input with sign(). #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:04 15.09.2023 Carnival flavour: vanilla #> 09:22:04 15.09.2023 Generating variables for lp problem #> 09:22:04 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_04d15_09_2023n8.RData #> 09:22:04 15.09.2023 Generating formulation for LP problem #> 09:22:04 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_04d15_09_2023n8.lp #> 09:22:04 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 882 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:05 15.09.2023 Done: solving LP problem. #> 09:22:05 15.09.2023 Getting the solution matrix #> 09:22:05 15.09.2023 Done: getting the solution matrix. #> 09:22:05 15.09.2023 Exporting solution matrix #> 09:22:05 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:05 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  test_result_for <- format_COSMOS_res(test_result_for) extreacted_nodes <- extract_nodes_for_ORA( sif = test_result_for[[1]], att = test_result_for[[2]] )"},{"path":"/reference/filter_incohrent_TF_target.html","id":null,"dir":"Reference","previous_headings":"","what":"filter_incohrent_TF_target — filter_incohrent_TF_target","title":"filter_incohrent_TF_target — filter_incohrent_TF_target","text":"Filters incoherent target genes regulatory network based decoupling analysis upstream downstream gene expression.","code":""},{"path":"/reference/filter_incohrent_TF_target.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter_incohrent_TF_target — filter_incohrent_TF_target","text":"","code":"filter_incohrent_TF_target(   decouplRnival_res,   TF_reg_net,   meta_network,   RNA_input )"},{"path":"/reference/filter_incohrent_TF_target.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter_incohrent_TF_target — filter_incohrent_TF_target","text":"decouplRnival_res data frame resulting decoupleRnival function. TF_reg_net data frame containing prior knowledge transcription factor (TF) regulatory interactions. meta_network network data frame containing signed directed prior knowledge molecular interactions. RNA_input named vector containing differential gene expression data.","code":""},{"path":"/reference/filter_incohrent_TF_target.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filter_incohrent_TF_target — filter_incohrent_TF_target","text":"network data frame containing genes incoherently regulated TFs.","code":""},{"path":"/reference/filter_incohrent_TF_target.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"filter_incohrent_TF_target — filter_incohrent_TF_target","text":"","code":"# Example input data upstream_input <- c(\"A\" = 1, \"B\" = -1, \"C\" = 0.5) downstream_input <- c(\"D\" = 2, \"E\" = -1.5) meta_network <- data.frame(   source = c(\"A\", \"A\", \"B\", \"C\", \"C\", \"D\", \"E\"),   target = c(\"B\", \"D\", \"D\", \"E\", \"D\", \"B\", \"A\"),   interaction = c(-1, 1, -1, 1, -1, -1, 1) ) RNA_input <- c(\"A\" = 1, \"B\" = -1, \"C\" = 5, \"D\" = -0.7, \"E\" = -0.3)  TF_reg_net <- data.frame( source = c(\"B\"), target = c(\"D\"), mor = c(-1) )  # Run the decoupleRnival function to get the upstream influence scores upstream_scores <- decoupleRnival(upstream_input, downstream_input, meta_network, n_layers = 2, n_perm = 100) #> [1] \"Warning, this function is deprecated and will no longer receive futur support. Please use the 'moon' function instead\"  filtered_network <- filter_incohrent_TF_target(upstream_scores, TF_reg_net, meta_network, RNA_input)  print(filtered_network) #>   source target interaction #> 1      A      B          -1 #> 2      A      D           1 #> 4      C      E           1 #> 5      C      D          -1 #> 6      D      B          -1 #> 7      E      A           1"},{"path":"/reference/format_COSMOS_res.html","id":null,"dir":"Reference","previous_headings":"","what":"format_COSMOS_res — format_COSMOS_res","title":"format_COSMOS_res — format_COSMOS_res","text":"formats network readable names","code":""},{"path":"/reference/format_COSMOS_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"format_COSMOS_res — format_COSMOS_res","text":"","code":"format_COSMOS_res(cosmos_res, metab_mapping = NULL)"},{"path":"/reference/format_COSMOS_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"format_COSMOS_res — format_COSMOS_res","text":"cosmos_res results COSMOS run metab_mapping named vector HMDB Ids names desired metabolite names values.","code":""},{"path":"/reference/format_COSMOS_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"format_COSMOS_res — format_COSMOS_res","text":"list network attribute tables.","code":""},{"path":"/reference/gmt_to_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert gmt file to data frame — gmt_to_dataframe","title":"Convert gmt file to data frame — gmt_to_dataframe","text":"function designed convert gmt file (gene set file MSigDB) two column data frame first column corresponds omic features (genes) second column associated terms (pathway gene belongs ). One gene can belong several pathways.","code":""},{"path":"/reference/gmt_to_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert gmt file to data frame — gmt_to_dataframe","text":"","code":"gmt_to_dataframe(gmtfile)"},{"path":"/reference/gmt_to_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert gmt file to data frame — gmt_to_dataframe","text":"gmtfile full path name gmt file converted","code":""},{"path":"/reference/gmt_to_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert gmt file to data frame — gmt_to_dataframe","text":"two column data frame first column corresponds omic features second column associated terms (pathways).","code":""},{"path":"/reference/load_tf_regulon_dorothea.html","id":null,"dir":"Reference","previous_headings":"","what":"load transcription factor regulon — load_tf_regulon_dorothea","title":"load transcription factor regulon — load_tf_regulon_dorothea","text":"load transcription factors DOROTHEA package converts  gene symbols EntrezID using org.Hs.eg.db","code":""},{"path":"/reference/load_tf_regulon_dorothea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"load transcription factor regulon — load_tf_regulon_dorothea","text":"","code":"load_tf_regulon_dorothea(confidence = c(\"A\", \"B\", \"C\"))"},{"path":"/reference/load_tf_regulon_dorothea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"load transcription factor regulon — load_tf_regulon_dorothea","text":"confidence strong vector (default: c(\"\",\"B\",\"C\")). Subset {, B,  C, D, E}. See `dorothea` meaning confidence levels.  package details.","code":""},{"path":"/reference/load_tf_regulon_dorothea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"load transcription factor regulon — load_tf_regulon_dorothea","text":"returns PKN form data table. row interaction. Columns names : - `tf` transcription factor - `confidence` class confidence - `target` target gene - `sign` indicates interaction (1) -regulation (-1).","code":""},{"path":"/reference/load_tf_regulon_dorothea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"load transcription factor regulon — load_tf_regulon_dorothea","text":"","code":"load_tf_regulon_dorothea() #> # A tibble: 13,223 × 3 #>    tf    target    sign #>    <chr> <chr>    <dbl> #>  1 AHR   CYP1A1       1 #>  2 AHR   CYP1A2       1 #>  3 AHR   CYP1B1       1 #>  4 AHR   FOS          1 #>  5 AHR   MYC          1 #>  6 AHR   UGT1A6       1 #>  7 AHR   ASAP1        1 #>  8 AHR   ERG          1 #>  9 AHR   VGLL4        1 #> 10 AHR   ARHGAP15     1 #> # ℹ 13,213 more rows"},{"path":"/reference/meta_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta Prior Knowledge Network — meta_network","title":"Meta Prior Knowledge Network — meta_network","text":"Comprehensive Prior Knowledge Network (PKN), combines signaling metabolic interaction networks.  network constructed using Recon3D  STITCH metabolic networks well signaling network OmniPath.","code":""},{"path":"/reference/meta_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta Prior Knowledge Network — meta_network","text":"","code":"data(meta_network)"},{"path":"/reference/meta_network.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Meta Prior Knowledge Network — meta_network","text":"object class “tibble” 117065 rows   (interactions) three variables: source Source node, either metabolite protein interaction Type interaction, 1 = Activation, -1 = Inhibition target Target node, either metabolite protein","code":""},{"path":"/reference/meta_network.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Meta Prior Knowledge Network — meta_network","text":"network available Omnipath:   https://metapkn.omnipathdb.org/metapkn__20200122.txt, scripts    used build network available   https://github.com/saezlab/Meta_PKN.","code":""},{"path":"/reference/meta_network.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Meta Prior Knowledge Network — meta_network","text":"Dugourd, ., Kuppe, C. Sciacovelli, M. et. al. (2021) Molecular    Systems Biology. 17, e9730.","code":""},{"path":"/reference/meta_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meta Prior Knowledge Network — meta_network","text":"","code":"data(meta_network)"},{"path":"/reference/meta_network_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"meta_network_cleanup — meta_network_cleanup","title":"meta_network_cleanup — meta_network_cleanup","text":"function cleans meta network data frame removing self-interactions, calculating mean interaction values duplicated source-target pairs, keeping interactions values 1 -1.","code":""},{"path":"/reference/meta_network_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"meta_network_cleanup — meta_network_cleanup","text":"","code":"meta_network_cleanup(meta_network)"},{"path":"/reference/meta_network_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"meta_network_cleanup — meta_network_cleanup","text":"meta_network data frame columns 'source', 'interaction', 'target'.","code":""},{"path":"/reference/meta_network_cleanup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"meta_network_cleanup — meta_network_cleanup","text":"cleaned meta network data frame.","code":""},{"path":"/reference/meta_network_cleanup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"meta_network_cleanup — meta_network_cleanup","text":"","code":"# Create a meta network data frame example_meta_network <- data.frame( source = c(\"A\", \"B\", \"C\", \"D\", \"A\", \"B\", \"C\", \"D\", \"A\"), interaction = c(1, 1, 1, -1, 1, -1, 1, -1, 1), target = c(\"B\", \"C\", \"D\", \"A\", \"C\", \"D\", \"A\", \"B\", \"B\") )  # Clean up the example meta network cleaned_meta_network <- meta_network_cleanup(example_meta_network) #> Warning: `summarise_each()` was deprecated in dplyr 0.7.0. #> ℹ Please use `across()` instead. #> ℹ The deprecated feature was likely used in the cosmosR package. #>   Please report the issue at <https://github.com/saezlab/COSMOSR/issues>. #> Warning: `funs()` was deprecated in dplyr 0.8.0. #> ℹ Please use a list of either functions or lambdas: #>  #> # Simple named list: list(mean = mean, median = median) #>  #> # Auto named with `tibble::lst()`: tibble::lst(mean, median) #>  #> # Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)) #> ℹ The deprecated feature was likely used in the cosmosR package. #>   Please report the issue at <https://github.com/saezlab/COSMOSR/issues>. print(cleaned_meta_network) #>   source target interaction #> 1      A      B           1 #> 2      A      C           1 #> 3      B      C           1 #> 4      B      D          -1 #> 5      C      A           1 #> 6      C      D           1 #> 7      D      A          -1 #> 8      D      B          -1"},{"path":"/reference/moon.html","id":null,"dir":"Reference","previous_headings":"","what":"moon — moon","title":"moon — moon","text":"Iteratively propagate downstream input activity signed directed network using weighted mean enrichment score decoupleR package","code":""},{"path":"/reference/moon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"moon — moon","text":"","code":"moon(   upstream_input = NULL,   downstream_input,   meta_network,   n_layers,   n_perm = 1000,   downstream_cutoff = 0,   statistic = \"ulm\",   return_levels = F )"},{"path":"/reference/moon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"moon — moon","text":"upstream_input named vector up_stream nodes corresponding activity. downstream_input named vector down_stream nodes corresponding activity. meta_network network data frame containing signed directed prior knowledge molecular interactions. n_layers number layers propagated upstream. n_perm number permutations use decoupleR's algorithm. downstream_cutoff downstream measurments included given threshold statistic decoupleR stat consider: \"wmean\", \"norm_wmean\", \"ulm\" return_levels true false, true layers protein belongs returned alongside scores","code":""},{"path":"/reference/moon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"moon — moon","text":"data frame containing score nodes upstream  downstream input based iterative propagation","code":""},{"path":"/reference/moon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"moon — moon","text":"","code":"# Example input data upstream_input <- c(\"A\" = 1, \"B\" = -1, \"C\" = 0.5) downstream_input <- c(\"D\" = 2, \"E\" = -1.5) meta_network <- data.frame(   source = c(\"A\", \"A\", \"B\", \"C\", \"C\", \"D\", \"E\"),   target = c(\"B\", \"C\", \"D\", \"E\", \"D\", \"B\", \"A\"),   sign = c(1, -1, -1, 1, -1, -1, 1) )  # Run the function with the example input data result <- moon(upstream_input, downstream_input, meta_network, n_layers = 2, statistic = \"wmean\") #> [1] 2  # View the results print(result) #>   source score level #> 1      B  -2.0     1 #> D      D   2.0     0 #> E      E  -1.5     0"},{"path":"/reference/prepare_metab_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"add metabolic compartment and metab__ prefix to metabolite IDs — prepare_metab_inputs","title":"add metabolic compartment and metab__ prefix to metabolite IDs — prepare_metab_inputs","text":"function adds metabolic compartments metabolic identifiers provided user.","code":""},{"path":"/reference/prepare_metab_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add metabolic compartment and metab__ prefix to metabolite IDs — prepare_metab_inputs","text":"","code":"prepare_metab_inputs(metab_input, compartment_codes)"},{"path":"/reference/prepare_metab_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add metabolic compartment and metab__ prefix to metabolite IDs — prepare_metab_inputs","text":"metab_input named  vector matebolic statistics inputs metabolite identifiers names compartment_codes character vector, desired compartment codes added. Possible values \"r\", \"c\", \"e\", \"x\", \"m\", \"l\", \"n\" \"g\"","code":""},{"path":"/reference/prepare_metab_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"add metabolic compartment and metab__ prefix to metabolite IDs — prepare_metab_inputs","text":"named vector compartment code prefixed added names","code":""},{"path":"/reference/preprocess_COSMOS_metabolism_to_signaling.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess COSMOS Inputs For Metabolism to Signaling — preprocess_COSMOS_metabolism_to_signaling","title":"Preprocess COSMOS Inputs For Metabolism to Signaling — preprocess_COSMOS_metabolism_to_signaling","text":"Runs checks input data simplifies prior knowledge network. Simplification includes removal (1) nodes reachable  signaling nodes  (2) interactions transcription factors target genes target gene respond response contradictory change transcription factor activity.  Optionally, TF activities estimated via network optimization via CARNIVAL interactions TF genes filtered .","code":""},{"path":"/reference/preprocess_COSMOS_metabolism_to_signaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess COSMOS Inputs For Metabolism to Signaling — preprocess_COSMOS_metabolism_to_signaling","text":"","code":"preprocess_COSMOS_metabolism_to_signaling(   meta_network = meta_network,   tf_regulon = load_tf_regulon_dorothea(),   signaling_data,   metabolic_data,   diff_expression_data = NULL,   diff_exp_threshold = 1,   maximum_network_depth = 8,   expressed_genes = NULL,   remove_unexpressed_nodes = TRUE,   filter_tf_gene_interaction_by_optimization = TRUE,   CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\") )"},{"path":"/reference/preprocess_COSMOS_metabolism_to_signaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess COSMOS Inputs For Metabolism to Signaling — preprocess_COSMOS_metabolism_to_signaling","text":"meta_network prior knowledge network (PKN). PKN released COSMOS derived Omnipath, STITCHdb Recon3D can used. See details  data meta_network. tf_regulon collection transcription factor - target interactions. default collection dorothea can obtained  load_tf_regulon_dorothea function. signaling_data numerical vector, names signaling nodes  PKN values {1, 0, -1}. Continuous data  discretized using sign function. metabolic_data numerical vector, names metabolic nodes  PKN values continuous values represents log2 fold change  t-values differential analysis. values compared  simulation results (simulated nodes can take value -1, 0 1) diff_expression_data (optional) numerical vector represents  results differential gene expression analysis. Names gene names using gene symbole values log fold change  t-values. use “diff_exp_threshold” parameter decide  genes changed significantly.  Genes NA values considered none   expressed removed TF-gene expression interactions. diff_exp_threshold threshold parameter (default 1) used binarize values “diff_expression_data”. maximum_network_depth integer > 0 (default: 8). Nodes  “maximum_network_depth” steps signaling nodes directed graph PKN considered non-reachable removed. expressed_genes character vector. Names nodes expressed.  default consider nodes appear diff_expression_data numeric value (.e. nodes NA removed) remove_unexpressed_nodes TRUE (default) removes nodes PKN  expressed, see input “expressed_genes”. filter_tf_gene_interaction_by_optimization (default:TRUE), TRUE runs  network optimization estimates TF activity included inputs checks consistency estimated activity change gene  expression. Removes interactions TF gene expression inconsistent CARNIVAL_options list controls options CARNIVAL. See details  default_CARNIVAL_options.","code":""},{"path":"/reference/preprocess_COSMOS_metabolism_to_signaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess COSMOS Inputs For Metabolism to Signaling — preprocess_COSMOS_metabolism_to_signaling","text":"cosmos_data object following fields:  meta_network Filtered PKN tf_regulon TF - target regulatory network signaling_data_bin Binarised signaling data metabolic_data Metabolomics data diff_expression_data_bin Binarized gene expression data optimized_network Initial optimized network      filter_tf_gene_interaction_by_optimization TRUE","code":""},{"path":[]},{"path":"/reference/preprocess_COSMOS_metabolism_to_signaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess COSMOS Inputs For Metabolism to Signaling — preprocess_COSMOS_metabolism_to_signaling","text":"","code":"data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_back <- preprocess_COSMOS_metabolism_to_signaling( meta_network = toy_network, signaling_data = toy_signaling_input, metabolic_data = toy_metabolic_input, diff_expression_data = toy_RNA, maximum_network_depth = 15, remove_unexpressed_nodes = TRUE, CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\") ) #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" #> [1] \"COSMOS: removing unexpressed nodes from PKN...\" #> [1] \"COSMOS: 0 interactions removed\" #> [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" #> [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" #> [1] \"COSMOS: 54 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: 1 input/measured nodes are not in PKN any more: Metab__HMDB0000190_c and 0 more.\" #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:09 15.09.2023 Carnival flavour: vanilla #> 09:22:09 15.09.2023 Generating variables for lp problem #> 09:22:09 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_09d15_09_2023n43.RData #> 09:22:09 15.09.2023 Generating formulation for LP problem #> 09:22:09 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_09d15_09_2023n43.lp #> 09:22:09 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 842 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:09 15.09.2023 Done: solving LP problem. #> 09:22:09 15.09.2023 Getting the solution matrix #> 09:22:09 15.09.2023 Done: getting the solution matrix. #> 09:22:09 15.09.2023 Exporting solution matrix #> 09:22:09 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:09 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 1 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\""},{"path":"/reference/preprocess_COSMOS_signaling_to_metabolism.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess COSMOS Inputs For Signaling to Metabolism — preprocess_COSMOS_signaling_to_metabolism","title":"Preprocess COSMOS Inputs For Signaling to Metabolism — preprocess_COSMOS_signaling_to_metabolism","text":"Runs checks input data simplifies prior knowledge network. Simplification includes removal (1) nodes reachable  signaling nodes  (2) interactions transcription factors target genes target gene respond response contradictory change transcription factor activity.  Optionally, TF activities estimated via network optimization via CARNIVAL interactions TF genes filtered .","code":""},{"path":"/reference/preprocess_COSMOS_signaling_to_metabolism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess COSMOS Inputs For Signaling to Metabolism — preprocess_COSMOS_signaling_to_metabolism","text":"","code":"preprocess_COSMOS_signaling_to_metabolism(   meta_network = meta_network,   tf_regulon = load_tf_regulon_dorothea(),   signaling_data,   metabolic_data,   diff_expression_data = NULL,   diff_exp_threshold = 1,   maximum_network_depth = 8,   expressed_genes = NULL,   remove_unexpressed_nodes = TRUE,   filter_tf_gene_interaction_by_optimization = TRUE,   CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\") )"},{"path":"/reference/preprocess_COSMOS_signaling_to_metabolism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess COSMOS Inputs For Signaling to Metabolism — preprocess_COSMOS_signaling_to_metabolism","text":"meta_network prior knowledge network (PKN). PKN released COSMOS derived Omnipath, STITCHdb Recon3D can used. See details  data meta_network. tf_regulon collection transcription factor - target interactions. default collection dorothea can obtained  load_tf_regulon_dorothea function. signaling_data numerical vector, names signaling nodes  PKN values {1, 0, -1}. Continuous data  discretized using sign function. metabolic_data numerical vector, names metabolic nodes  PKN values continuous values represents log2 fold change  t-values differential analysis. values compared  simulation results (simulated nodes can take value -1, 0 1) diff_expression_data (optional) numerical vector represents  results differential gene expression analysis. Names gene names using gene symbole values log fold change  t-values.  use “diff_exp_threshold” parameter decide  genes changed significantly.  Genes NA values considered none  expressed removed TF-gene expression interactions. diff_exp_threshold threshold parameter (default 1) used binarize values “diff_expression_data”. maximum_network_depth integer > 0 (default: 8). Nodes  “maximum_network_depth” steps signaling nodes  directed graph PKN considered non-reachable removed. expressed_genes character vector. Names nodes expressed.  default consider nodes appear diff_expression_data numeric value (.e. nodes NA removed) remove_unexpressed_nodes TRUE (default) removes nodes PKN  expressed, see input “expressed_genes”. filter_tf_gene_interaction_by_optimization (default:TRUE), TRUE runs  network optimization estimates TF activity included inputs checks consistency estimated activity change gene  expression. Removes interactions TF gene expression inconsistent CARNIVAL_options list controls options CARNIVAL. See details  default_CARNIVAL_options.","code":""},{"path":"/reference/preprocess_COSMOS_signaling_to_metabolism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess COSMOS Inputs For Signaling to Metabolism — preprocess_COSMOS_signaling_to_metabolism","text":"cosmos_data object following fields:  meta_network Filtered PKN tf_regulon TF - target regulatory network signaling_data_bin Binarised signaling data metabolic_data Metabolomics data diff_expression_data_bin Binarized gene expression data optimized_network Initial optimized network      filter_tf_gene_interaction_by_optimization TRUE","code":""},{"path":[]},{"path":"/reference/preprocess_COSMOS_signaling_to_metabolism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess COSMOS Inputs For Signaling to Metabolism — preprocess_COSMOS_signaling_to_metabolism","text":"","code":"data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,      signaling_data = toy_signaling_input,      metabolic_data = toy_metabolic_input,      diff_expression_data = toy_RNA,      maximum_network_depth = 15,      remove_unexpressed_nodes = TRUE,      CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\")) #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" #> [1] \"COSMOS: removing unexpressed nodes from PKN...\" #> [1] \"COSMOS: 0 interactions removed\" #> [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" #> [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" #> [1] \"COSMOS: 52 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: 2 input/measured nodes are not in PKN any more: USF1, SRF and 0 more.\" #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:09 15.09.2023 Carnival flavour: vanilla #> 09:22:09 15.09.2023 Generating variables for lp problem #> 09:22:09 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_09d15_09_2023n93.RData #> 09:22:09 15.09.2023 Generating formulation for LP problem #> 09:22:09 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_09d15_09_2023n93.lp #> 09:22:09 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 882 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:10 15.09.2023 Done: solving LP problem. #> 09:22:10 15.09.2023 Getting the solution matrix #> 09:22:10 15.09.2023 Done: getting the solution matrix. #> 09:22:10 15.09.2023 Exporting solution matrix #> 09:22:10 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:10 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"COSMOS: all 1 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\""},{"path":"/reference/print.cosmos_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Cosmos Data Summary\nPrint a summary of cosmos data. — print.cosmos_data","title":"Print Cosmos Data Summary\nPrint a summary of cosmos data. — print.cosmos_data","text":"Print Cosmos Data Summary Print summary cosmos data.","code":""},{"path":"/reference/print.cosmos_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Cosmos Data Summary\nPrint a summary of cosmos data. — print.cosmos_data","text":"","code":"# S3 method for cosmos_data print(x, ...)"},{"path":"/reference/print.cosmos_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Cosmos Data Summary\nPrint a summary of cosmos data. — print.cosmos_data","text":"x cosmos_data object.  Use  preprocess_COSMOS_signaling_to_metabolism  preprocess_COSMOS_metabolism_to_signaling functions  create one. ... print arguments passed methods.","code":""},{"path":"/reference/print.cosmos_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Cosmos Data Summary\nPrint a summary of cosmos data. — print.cosmos_data","text":"input (invisible)","code":""},{"path":[]},{"path":"/reference/reduce_solution_network.html","id":null,"dir":"Reference","previous_headings":"","what":"reduce_solution_network — reduce_solution_network","title":"reduce_solution_network — reduce_solution_network","text":"Reduces solution network based decoupling analysis upstream downstream gene expression, filtering edges meet consistency threshold, limiting network certain number steps upstream input nodes.","code":""},{"path":"/reference/reduce_solution_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"reduce_solution_network — reduce_solution_network","text":"","code":"reduce_solution_network(   decoupleRnival_res,   meta_network,   cutoff,   upstream_input,   RNA_input = NULL,   n_steps = 10 )"},{"path":"/reference/reduce_solution_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"reduce_solution_network — reduce_solution_network","text":"decoupleRnival_res data frame resulting decoupleRnival function. meta_network network data frame containing signed directed prior knowledge molecular interactions. cutoff consistency threshold filtering edges solution network. upstream_input named vector up_stream nodes corresponding activity. RNA_input named vector containing differential gene expression data. n_steps maximum number steps upstream input nodes include solution network.","code":""},{"path":"/reference/reduce_solution_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"reduce_solution_network — reduce_solution_network","text":"list containing solution network (SIF) attribute table (ATT) gene expression data.","code":""},{"path":"/reference/reduce_solution_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"reduce_solution_network — reduce_solution_network","text":"","code":"# Example input data upstream_input <- c(\"A\" = 1, \"B\" = -1, \"C\" = 0.5) downstream_input <- c(\"D\" = 2, \"E\" = -1.5) meta_network <- data.frame(   source = c(\"A\", \"A\", \"B\", \"C\", \"C\", \"D\", \"E\"),   target = c(\"B\", \"D\", \"D\", \"E\", \"D\", \"B\", \"A\"),   interaction = c(-1, 1, -1, 1, -1, -1, 1) ) RNA_input <- c(\"A\" = 1, \"B\" = -1, \"C\" = 5, \"D\" = 0.7, \"E\" = -0.3)  # Run the decoupleRnival function to get the upstream influence scores upstream_scores <- decoupleRnival(upstream_input, downstream_input, meta_network, n_layers = 2, n_perm = 100) #> [1] \"Warning, this function is deprecated and will no longer receive futur support. Please use the 'moon' function instead\"  # Reduce the solution network based on the upstream influence scores reduced_network <- reduce_solution_network(upstream_scores, meta_network, 0.4, upstream_input, RNA_input, 3) #> [1] \"COSMOS: removing nodes that are not reachable from inputs within 3 steps\" #> [1] \"COSMOS: 0 from  4 interactions are removed from the PKN\"  # View the resulting solution network and attribute table print(reduced_network$SIF) #>   source target interaction consistency #> 1      A      B          -1        TRUE #> 2      A      D           1        TRUE #> 3      B      D          -1        TRUE #> 6      D      B          -1        TRUE print(reduced_network$ATT) #>   nodes    score RNA_input #> 1     A  1.05659       1.0 #> 2     B -1.05659      -1.0 #> 3     D  2.00000       0.7"},{"path":"/reference/run_COSMOS_metabolism_to_signaling.html","id":null,"dir":"Reference","previous_headings":"","what":"run COSMOS metabolism to signaling — run_COSMOS_metabolism_to_signaling","title":"run COSMOS metabolism to signaling — run_COSMOS_metabolism_to_signaling","text":"Runs COSMOS metabolism signaling.  function uses CARNIVAL find subset prior knowledge network based optimization (1)  includes measured input nodes (2) agreement data.  Use preprocess_COSMOS_metabolism_to_signaling  prepare inputs, measurements prior knowledge network.","code":""},{"path":"/reference/run_COSMOS_metabolism_to_signaling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run COSMOS metabolism to signaling — run_COSMOS_metabolism_to_signaling","text":"","code":"run_COSMOS_metabolism_to_signaling(   data,   CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\") )"},{"path":"/reference/run_COSMOS_metabolism_to_signaling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run COSMOS metabolism to signaling — run_COSMOS_metabolism_to_signaling","text":"data cosmos_data object.  Use  preprocess_COSMOS_metabolism_to_signaling function create  instance. CARNIVAL_options List controls options CARNIVAL. See details  default_CARNIVAL_options.","code":""},{"path":"/reference/run_COSMOS_metabolism_to_signaling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run COSMOS metabolism to signaling — run_COSMOS_metabolism_to_signaling","text":"List following elements:  weightedSIF averaged networks found      optimization format Simple Interaction network, .e. row      codes edge N_networks Number solutions found      optimization nodesAttributes Estimated node properties individual_networks List optimial networks found individual_networks_node_attributes Node activity     network","code":""},{"path":[]},{"path":"/reference/run_COSMOS_metabolism_to_signaling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"run COSMOS metabolism to signaling — run_COSMOS_metabolism_to_signaling","text":"","code":"data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_back <- preprocess_COSMOS_metabolism_to_signaling(meta_network = toy_network,                         signaling_data = toy_signaling_input,                         metabolic_data = toy_metabolic_input,                         diff_expression_data = toy_RNA,                         maximum_network_depth = 15,                         remove_unexpressed_nodes = TRUE,                         CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\")) #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" #> [1] \"COSMOS: removing unexpressed nodes from PKN...\" #> [1] \"COSMOS: 0 interactions removed\" #> [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" #> [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" #> [1] \"COSMOS: 54 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: 1 input/measured nodes are not in PKN any more: Metab__HMDB0000190_c and 0 more.\" #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:12 15.09.2023 Carnival flavour: vanilla #> 09:22:12 15.09.2023 Generating variables for lp problem #> 09:22:12 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_12d15_09_2023n78.RData #> 09:22:12 15.09.2023 Generating formulation for LP problem #> 09:22:12 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_12d15_09_2023n78.lp #> 09:22:12 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 842 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:12 15.09.2023 Done: solving LP problem. #> 09:22:12 15.09.2023 Getting the solution matrix #> 09:22:12 15.09.2023 Done: getting the solution matrix. #> 09:22:12 15.09.2023 Exporting solution matrix #> 09:22:12 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:12 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 1 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\"  test_result_back <- run_COSMOS_metabolism_to_signaling(data = test_back,                        CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\")) #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> Input nodes should have values from {-1, 0, 1}. We discretize your input with sign(). #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:12 15.09.2023 Carnival flavour: vanilla #> 09:22:12 15.09.2023 Generating variables for lp problem #> 09:22:12 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_12d15_09_2023n93.RData #> 09:22:12 15.09.2023 Generating formulation for LP problem #> 09:22:12 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_12d15_09_2023n93.lp #> 09:22:12 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 842 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:12 15.09.2023 Done: solving LP problem. #> 09:22:12 15.09.2023 Getting the solution matrix #> 09:22:12 15.09.2023 Done: getting the solution matrix. #> 09:22:12 15.09.2023 Exporting solution matrix #> 09:22:12 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:12 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---"},{"path":"/reference/run_COSMOS_signaling_to_metabolism.html","id":null,"dir":"Reference","previous_headings":"","what":"run COSMOS signaling to metabolism — run_COSMOS_signaling_to_metabolism","title":"run COSMOS signaling to metabolism — run_COSMOS_signaling_to_metabolism","text":"Runs COSMOS signaling metabolism.  function uses CARNIVAL find subset prior knowledge network based optimisation (1)  includes measured input nodes (2) agreement data.  Use preprocess_COSMOS_signaling_to_metabolism prepare inputs, measurements prior knowledge network.","code":""},{"path":"/reference/run_COSMOS_signaling_to_metabolism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"run COSMOS signaling to metabolism — run_COSMOS_signaling_to_metabolism","text":"","code":"run_COSMOS_signaling_to_metabolism(   data,   CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\") )"},{"path":"/reference/run_COSMOS_signaling_to_metabolism.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"run COSMOS signaling to metabolism — run_COSMOS_signaling_to_metabolism","text":"data cosmos_data object.  Use preprocess_COSMOS_signaling_to_metabolism function create instance. CARNIVAL_options List controls options CARNIVAL. See  details default_CARNIVAL_options.","code":""},{"path":"/reference/run_COSMOS_signaling_to_metabolism.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"run COSMOS signaling to metabolism — run_COSMOS_signaling_to_metabolism","text":"List following elements:  weightedSIF averaged networks found      optimization format Simple Interaction network, .e. row      codes edge N_networks Number solutions found      optimization nodesAttributes Estimated node properties individual_networks List optimial networks found individual_networks_node_attributes Node activity     network","code":""},{"path":[]},{"path":"/reference/run_COSMOS_signaling_to_metabolism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"run COSMOS signaling to metabolism — run_COSMOS_signaling_to_metabolism","text":"","code":"data(toy_network) data(toy_signaling_input) data(toy_metabolic_input) data(toy_RNA) test_for <- preprocess_COSMOS_signaling_to_metabolism(meta_network = toy_network,                              signaling_data = toy_signaling_input,                              metabolic_data = toy_metabolic_input,                              diff_expression_data = toy_RNA,                              maximum_network_depth = 15,                              remove_unexpressed_nodes = TRUE,                              CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\")) #> [1] \"COSMOS: all 3 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\" #> [1] \"COSMOS: removing unexpressed nodes from PKN...\" #> [1] \"COSMOS: 0 interactions removed\" #> [1] \"COSMOS: removing nodes that are not reachable from inputs within 15 steps\" #> [1] \"COSMOS: 0 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: removing nodes that are not observable by measurements within 15 steps\" #> [1] \"COSMOS: 52 from  101 interactions are removed from the PKN\" #> [1] \"COSMOS: 2 input/measured nodes are not in PKN any more: USF1, SRF and 0 more.\" #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:13 15.09.2023 Carnival flavour: vanilla #> 09:22:13 15.09.2023 Generating variables for lp problem #> 09:22:13 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_13d15_09_2023n5.RData #> 09:22:13 15.09.2023 Generating formulation for LP problem #> 09:22:13 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_13d15_09_2023n5.lp #> 09:22:13 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 882 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:13 15.09.2023 Done: solving LP problem. #> 09:22:13 15.09.2023 Getting the solution matrix #> 09:22:13 15.09.2023 Done: getting the solution matrix. #> 09:22:13 15.09.2023 Exporting solution matrix #> 09:22:13 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:13 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---  #> [1] \"COSMOS:  0 interactions are removed from the PKN based on consistency check between TF activity and gene expression\" #> [1] \"COSMOS: all 1 signaling nodes from data were found in the meta PKN\" #> [1] \"COSMOS: all 2 metabolic nodes from data were found in the meta PKN\" #> [1] \"COSMOS: 2975 of the 9300 genes in expression data were found as transcription factor target\" #> [1] \"COSMOS: 2975 of the 5321 transcription factor targets were found in expression data\"  test_result_for <- run_COSMOS_signaling_to_metabolism(data = test_for,                              CARNIVAL_options = default_CARNIVAL_options(\"lpSolve\")) #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> Input nodes should have values from {-1, 0, 1}. We discretize your input with sign(). #> [1] \"lpSolve does not scale well with large PKNs. This solver is mainly for testing purposes. To run COSMSO, we recommend using cplex, or cbc solvers.\" #> --- Start of the CARNIVAL pipeline --- #> 09:22:13 15.09.2023 Carnival flavour: vanilla #> 09:22:13 15.09.2023 Generating variables for lp problem #> 09:22:13 15.09.2023 Done: generating variables for lp problem #> Saving preprocessed data. #> Done: saving parsed data: /tmp/RtmpHtZXaF/file15761f3df371/reference//parsedData_t09_22_13d15_09_2023n75.RData #> 09:22:13 15.09.2023 Generating formulation for LP problem #> 09:22:13 15.09.2023 Done: generating formulation for LP problem. #> Saving LP file #> Done: Saving LP file: /tmp/RtmpHtZXaF/file15761f3df371/reference//lpFile_t09_22_13d15_09_2023n75.lp #> 09:22:13 15.09.2023 Solving LP problem #> Parsing .lp file for lpSolve #> Rows: 882 Columns: 1 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): X1 #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Done: parsing .lp file for lpSolve #> 09:22:14 15.09.2023 Done: solving LP problem. #> 09:22:14 15.09.2023 Getting the solution matrix #> 09:22:14 15.09.2023 Done: getting the solution matrix. #> 09:22:14 15.09.2023 Exporting solution matrix #> 09:22:14 15.09.2023 Done: exporting solution matrix. #> Cleaning intermediate files #> Done: cleaning #> 09:22:14 15.09.2023 All tasks finished. #>  #> --- End of the CARNIVAL pipeline ---"},{"path":"/reference/toy_RNA.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Input Transcription Data Set — toy_RNA","title":"Toy Input Transcription Data Set — toy_RNA","text":"exemplary transcription data specific deregulated gene expression 786-O cell line NCI60 dataset.","code":""},{"path":"/reference/toy_RNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Input Transcription Data Set — toy_RNA","text":"","code":"data(toy_RNA)"},{"path":"/reference/toy_RNA.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Input Transcription Data Set — toy_RNA","text":"object class “numeric” containing t-values   9300 genes, named gene symboles matching toy network.","code":""},{"path":"/reference/toy_RNA.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Toy Input Transcription Data Set — toy_RNA","text":"https://github.com/saezlab/COSMOS_MSB/blob/main/data/RNA_ttop_tumorvshealthy.csv","code":""},{"path":"/reference/toy_RNA.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Toy Input Transcription Data Set — toy_RNA","text":"Dugourd, ., Kuppe, C. Sciacovelli, M. et. al. (2021) Molecular    Systems Biology. 17, e9730.","code":""},{"path":"/reference/toy_RNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toy Input Transcription Data Set — toy_RNA","text":"","code":"data(toy_RNA)"},{"path":"/reference/toy_metabolic_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Metabolic Input Data — toy_metabolic_input","title":"Toy Metabolic Input Data — toy_metabolic_input","text":"metabolic data subset metabolic measurements 786-O cell line NCI60 dataset.","code":""},{"path":"/reference/toy_metabolic_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Metabolic Input Data — toy_metabolic_input","text":"","code":"data(toy_metabolic_input)"},{"path":"/reference/toy_metabolic_input.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Metabolic Input Data — toy_metabolic_input","text":"object class “numeric” containing t-values   2 metabolites, named metabolite HMDB Ids matching   toy network.","code":""},{"path":"/reference/toy_metabolic_input.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Toy Metabolic Input Data — toy_metabolic_input","text":"Subset :    https://github.com/saezlab/COSMOS_MSB/blob/main/data/metab_input_COSMOS.csv","code":""},{"path":"/reference/toy_metabolic_input.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Toy Metabolic Input Data — toy_metabolic_input","text":"Dugourd, ., Kuppe, C. Sciacovelli, M. et. al. (2021) Molecular    Systems Biology. 17, e9730.","code":""},{"path":"/reference/toy_metabolic_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toy Metabolic Input Data — toy_metabolic_input","text":"","code":"data(toy_metabolic_input)"},{"path":"/reference/toy_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Input Network — toy_network","title":"Toy Input Network — toy_network","text":"signaling network reduced COSMOS network solution obtained cosmos test 786-O NCI60 data.  , network solution reused exemplary input prior knowledge network (PKN).","code":""},{"path":"/reference/toy_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Input Network — toy_network","text":"","code":"data(toy_network)"},{"path":"/reference/toy_network.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Input Network — toy_network","text":"object class “data.frame” 19 rows   (interactions) three variables: source Source node, either metabolite protein interaction Type interaction, 1 = Activation, -1 = Inhibition target Target node, either metabolite protein","code":""},{"path":"/reference/toy_network.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Toy Input Network — toy_network","text":"network data available github:   https://github.com/saezlab/COSMOS_MSB/tree/main/results/COSMOS_result/COSMOS_res_session.RData.   toy_network combined network COSMOS network solutions    CARNIVAL_Result2 CARNIVAL_Result_rerun subsequently reduced 19   exemplary nodes.","code":""},{"path":"/reference/toy_network.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Toy Input Network — toy_network","text":"Dugourd, ., Kuppe, C. Sciacovelli, M. et. al. (2021) Molecular    Systems Biology. 17, e9730.","code":""},{"path":"/reference/toy_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toy Input Network — toy_network","text":"","code":"data(toy_network)"},{"path":"/reference/toy_signaling_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Signaling Input — toy_signaling_input","title":"Toy Signaling Input — toy_signaling_input","text":"signaling data subset footprint-based signaling activity estimates transcription factors 786-O cell line NCI60 dataset.","code":""},{"path":"/reference/toy_signaling_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Signaling Input — toy_signaling_input","text":"","code":"data(toy_signaling_input)"},{"path":"/reference/toy_signaling_input.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Toy Signaling Input — toy_signaling_input","text":"object class “data.frame” containing normalised   enrichment scores (NES) 2 signaling proteins, named   respective gene Entrez ID matching toy network.","code":""},{"path":"/reference/toy_signaling_input.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Toy Signaling Input — toy_signaling_input","text":"Subset :    https://github.com/saezlab/COSMOS_MSB/blob/main/data/signaling_input_COSMOS.csv","code":""},{"path":"/reference/toy_signaling_input.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Toy Signaling Input — toy_signaling_input","text":"Dugourd, ., Kuppe, C. Sciacovelli, M. et. al. (2021) Molecular    Systems Biology. 17, e9730.","code":""},{"path":"/reference/toy_signaling_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toy Signaling Input — toy_signaling_input","text":"","code":"data(toy_signaling_input)"},{"path":"/reference/translate_res.html","id":null,"dir":"Reference","previous_headings":"","what":"translate_res — translate_res","title":"translate_res — translate_res","text":"formats network readable names","code":""},{"path":"/reference/translate_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"translate_res — translate_res","text":"","code":"translate_res(SIF, ATT, HMDB_mapper_vec = NULL)"},{"path":"/reference/translate_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"translate_res — translate_res","text":"SIF result SIF decoupleRnival pipeline ATT result ATT decoupleRnival pipeline HMDB_mapper_vec named vector HMDB Ids names desired metabolite names values.","code":""},{"path":"/reference/translate_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"translate_res — translate_res","text":"list network attribute tables.","code":""},{"path":"/reference/translate_res.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"translate_res — translate_res","text":"","code":"# Create a meta network data frame example_SIF <- data.frame( source = c(\"GPX1\", \"Gene863__GPX1\"), target = c(\"Gene863__GPX1\", \"Metab__HMDB0003337_c\"), sign = c(1, 1) )  example_ATT <- data.frame( Nodes = c(\"GPX1\", \"Gene863__GPX1\",\"Metab__HMDB0003337_c\"), sign = c(1, 1, 1) )  example_SIF #>          source               target sign #> 1          GPX1        Gene863__GPX1    1 #> 2 Gene863__GPX1 Metab__HMDB0003337_c    1  data(\"HMDB_mapper_vec\")  translated_res <- translate_res(example_SIF,example_ATT,HMDB_mapper_vec)  translated_res$SIF #>            source                 target sign #> 1            GPX1        Enzyme863__GPX1    1 #> 2 Enzyme863__GPX1 Metab__Oxiglutatione_c    1"},{"path":"/news/index.html","id":"changes-in-version-0992-2020-05-12","dir":"Changelog","previous_headings":"","what":"Changes in version 0.99.2 (2020-05-12)","title":"Changes in version 0.99.2 (2020-05-12)","text":"Submitted bioRxiv Release github page Submitted Bioconductor","code":""}]
